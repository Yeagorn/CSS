#pragma once

#undef DYNOHOOK_TEST_NAME
#undef DYNOHOOK_TEST_CONV
#undef DYNOHOOK_TEST_OBJECT
#undef DYNOHOOK_TEST_HEADER
#undef DYNOHOOK_TEST_NAMESPACE

#cmakedefine DYNOHOOK_TEST_NAME "@DYNOHOOK_TEST_NAME@"
#cmakedefine DYNOHOOK_TEST_CONV @DYNOHOOK_TEST_CONV@
#cmakedefine DYNOHOOK_TEST_OBJECT @DYNOHOOK_TEST_OBJECT@
#cmakedefine DYNOHOOK_TEST_HEADER "dynohook/conventions/@DYNOHOOK_TEST_HEADER@.h"
#cmakedefine DYNOHOOK_TEST_NAMESPACE @DYNOHOOK_TEST_NAMESPACE@

#include "dynohook/manager.h"
#include DYNOHOOK_TEST_HEADER

namespace DYNOHOOK_TEST_NAMESPACE {
    int g_MyFuncCallCount = 0;
    int g_PreMyFuncCallCount = 0;
    int g_PostMyFuncCallCount = 0;

    using namespace dyno;

    DYNO_NOINLINE int DYNOHOOK_TEST_CONV MyFunc(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9) {
        g_MyFuncCallCount++;
        assert(a0 == 0);
        assert(a1 == 1);
        assert(a2 == 2);
        assert(a3 == 3);
        assert(a4 == 4);
        assert(a5 == 5);
        assert(a6 == 6);
        assert(a7 == 7);
        assert(a8 == 8);
        assert(a9 == 100);

        int result = a0 + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9;
        assert(result == 136);

        return result;
    }

    ReturnAction PreMyFunc(HookType hookType, Hook& hook) {
        g_PreMyFuncCallCount++;

        for (size_t i = 0; i < 10; ++i) {
            int a = hook.getArgument<int>(i);
            assert(a == i);
        }

        hook.setArgument(9, 100);

        return ReturnAction::Ignored;
    }

    ReturnAction PostMyFunc(HookType hookType, Hook& hook) {
        g_PostMyFuncCallCount++;

        for (size_t i = 0; i < 9; ++i) {
            int a = hook.getArgument<int>(i);
            assert(a == i);
        }

        int last_value = hook.getArgument<int>(9);
        assert(last_value == 100);

        int return_value = hook.getReturnValue<int>();
        assert(return_value == 136);

        hook.setReturnValue<int>(1337);

        return ReturnAction::Ignored;
    }

    void test() {
        HookManager& manager = HookManager::Get();

        // hook the function
        Hook* hook = manager.hook((void*) &MyFunc, [] { return new DYNOHOOK_TEST_OBJECT({DataType::Int, DataType::Int, DataType::Int, DataType::Int, DataType::Int, DataType::Int, DataType::Int, DataType::Int, DataType::Int, DataType::Int}, DataType::Int); });

        // add the callbacks
        hook->addCallback(HookType::Pre, (HookHandler*) &PreMyFunc);
        hook->addCallback(HookType::Post, (HookHandler*) &PostMyFunc);

        // call the function
        int ret = MyFunc(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);

        assert(g_MyFuncCallCount == 1);
        assert(g_PreMyFuncCallCount == 1);
        assert(g_PostMyFuncCallCount == 1);
        assert(ret == 1337);

        manager.unhookAll();

        printf("Test: \"%s\" was passed\n", DYNOHOOK_TEST_NAME);
    }
}